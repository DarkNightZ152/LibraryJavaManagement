/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package giaodien;


import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author ADMIN
 */
public class frmTKS extends javax.swing.JFrame {

    /**
     * Creates new form frmTKS
     */
    public frmTKS() {
        initComponents();
        hienthi();
        loadCB() ;
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel14 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        cboChon = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbkq = new javax.swing.JTable();
        btnXuatE = new javax.swing.JButton();
        dcBD = new com.toedter.calendar.JDateChooser();
        dcCuoi = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cboMatl = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel14.setPreferredSize(new java.awt.Dimension(1307, 765));

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgicon/book.png"))); // NOI18N
        jLabel24.setText("Lựa chọn:");

        cboChon.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        cboChon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sách được mượn nhiều nhất", "Sách được nhập theo ngày", "Theo thể loại" }));
        cboChon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChonActionPerformed(evt);
            }
        });

        tbkq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbkq);

        btnXuatE.setText("Xuất excel");
        btnXuatE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatEActionPerformed(evt);
            }
        });

        dcBD.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        dcCuoi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Từ ngày:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Đến ngày: ");

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgicon/icon_previous.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 112));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgicon/bill.png"))); // NOI18N
        jLabel3.setText("THỐNG KÊ  SÁCH");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(439, 439, 439)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1299, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        cboMatl.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cboMatl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMatlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(cboMatl, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel14Layout.createSequentialGroup()
                                            .addComponent(jLabel24)
                                            .addGap(53, 53, 53)
                                            .addComponent(cboChon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(99, 99, 99)
                                        .addComponent(dcBD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(114, 114, 114)
                                .addComponent(jLabel2)
                                .addGap(104, 104, 104)
                                .addComponent(dcCuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(193, 193, 193)
                                .addComponent(btnXuatE, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(cboChon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cboMatl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dcBD, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(dcCuoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(btnXuatE, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 1306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
DefaultTableModel model = new DefaultTableModel();
public void openFile(String file){
        try{
            File path = new File(file);
            Desktop.getDesktop().open(path);
        }catch(IOException ioe){
            System.out.println(ioe);
        }
    }
    private void btnXuatEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatEActionPerformed
try{
           JFileChooser jFileChooser = new JFileChooser();
           jFileChooser.showSaveDialog(this);
           File saveFile = jFileChooser.getSelectedFile();
           
           if(saveFile != null){
               saveFile = new File(saveFile.toString()+".xlsx");
               Workbook wb = new XSSFWorkbook();
               Sheet sheet = (Sheet) wb.createSheet("ThongKeSach");
               
               Row rowCol = sheet.createRow(0);
               for(int i=0;i<tbkq.getColumnCount();i++){
                   Cell cell = rowCol.createCell(i);
                   cell.setCellValue(tbkq.getColumnName(i));
               }
               
               for(int j=0;j<tbkq.getRowCount();j++){
                   Row row = sheet.createRow(j+1);
                   for(int k=0;k<tbkq.getColumnCount();k++){
                       Cell cell = row.createCell(k);
                       if(tbkq.getValueAt(j, k)!=null){
                           cell.setCellValue(tbkq.getValueAt(j, k).toString());
                       }
                   }
               }
               FileOutputStream out = new FileOutputStream(new File(saveFile.toString()));
               wb.write(out);
//               wb.close();
               out.close();
               JOptionPane.showMessageDialog(this,"Xuất file thành công");
              openFile(saveFile.toString());
           }else{
               JOptionPane.showMessageDialog(null,"Error al generar archivo");
           }
       }catch(FileNotFoundException e){
           System.out.println(e);
       }catch(IOException io){
           System.out.println(io);
       }
 
    }//GEN-LAST:event_btnXuatEActionPerformed
    public void loadCB() 
    {
        Connection conn = DBconnection.geConnection();
        String sql ="select DISTINCT matl from Sach";
        try {
            java.sql.PreparedStatement stm= conn.prepareStatement(sql);
            ResultSet rs = stm.executeQuery();
            while (rs.next()) {
              this.cboMatl.addItem(rs.getString("matl"));
                
            }
        } catch (java.sql.SQLException ex) {
           // Logger.getLogger(pane2.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    
    public String getvalue(int x, int y)
    {
       return model.getValueAt(x, y).toString();
    }
    
    public void cboChon(){
    if(cboChon.getSelectedItem().equals("--"))
        {
            cboMatl.setEnabled(false);
             try {
            tbkq.removeAll();
            String [] arr = {"Mã Sách","Tên Sách","Mã Thể Loại","Tác Giả","Nhà XB","Ngày Nhập","Giá","Số Lượng","Tóm Tắt"};
            
            model = new DefaultTableModel(arr, 0); //DefaultTableModel lưu trữ dữ liệu cho JTable trong một > Vector > Vectors .
            
            Connection connection = DBconnection.geConnection();
            
            String query = "SELECT * FROM Sach";
            java.sql.Statement statement =  connection.createStatement();
	    ResultSet rs = statement.executeQuery(query);
            while(rs.next()) {
                Vector vct = new Vector();
		vct.add(rs.getString("mas"));
                vct.add(rs.getString("tensach"));
                vct.add(rs.getString("matl"));
                vct.add(rs.getString("tacgia"));
                vct.add(rs.getString("nhaxb"));
                vct.add(rs.getString("namxb"));
                vct.add(rs.getString("giasach"));
                vct.add(rs.getString("soluong"));
                vct.add(rs.getString("tomtat"));
                model.addRow(vct);
                tbkq.setModel(model);
	    }   
        } catch (Exception e) {
        }
           
        }    
        if(cboChon.getSelectedItem().equals("Sách được mượn nhiều nhất"))
        {
            cboMatl.setEnabled(false);
             try {
            tbkq.removeAll();
            String [] arr = {"Tên Sách","Tác giả","Nhà xuất bản","Số lượng được mượn"};
          //  DefaultTableModel model;
            model = new DefaultTableModel(arr, 0); //DefaultTableModel lưu trữ dữ liệu cho JTable trong một > Vector > Vectors .
            
            Connection connection = DBconnection.geConnection();
            
            String query = "select Sach.tensach,Sach.tacgia,Sach.nhaxb , SUM(PhieuMuon.soluong) as 'SoSach' from Sach,PhieuMuon where Sach.mas = PhieuMuon.mas group by Sach.tensach,Sach.tacgia,Sach.nhaxb order by SUM(PhieuMuon.soluong) desc";
            java.sql.Statement statement =  connection.createStatement();
	    ResultSet rs = statement.executeQuery(query);
            while(rs.next()) {
                Vector vct = new Vector();
		vct.add(rs.getString("tensach"));
                vct.add(rs.getString("tacgia"));
                vct.add(rs.getString("nhaxb"));
                vct.add(rs.getString("SoSach"));
                
                model.addRow(vct);
                tbkq.setModel(model);
	    }   
        } catch (Exception e) {
        }
          
        }
        if(cboChon.getSelectedItem().equals("Sách được nhập theo ngày"))
        {
            cboMatl.setEnabled(false);
             try {
            tbkq.removeAll();
            String [] arr = {"Mã Sách","Tên Sách","Mã Thể Loại","Tác Giả","Nhà XB","Năm XB","Giá","Số Lượng","Tóm Tắt"};
         //   DefaultTableModel model;
            model = new DefaultTableModel(arr, 0); //DefaultTableModel lưu trữ dữ liệu cho JTable trong một > Vector > Vectors .
            
            Connection connection = DBconnection.geConnection();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String ngaybd = sdf.format(dcBD.getDate());
            String ngaykt = sdf.format(dcCuoi.getDate());
            String query = "SELECT * FROM Sach where namxb > '"+ngaybd+"' and namxb < '"+ngaykt+"'";
            java.sql.Statement statement =  connection.createStatement();
	    ResultSet rs = statement.executeQuery(query);
            while(rs.next()) {
                Vector vct = new Vector();
		vct.add(rs.getString("mas"));
                vct.add(rs.getString("tensach"));
                vct.add(rs.getString("matl"));
                vct.add(rs.getString("tacgia"));
                vct.add(rs.getString("nhaxb"));
                vct.add(rs.getString("namxb"));
                vct.add(rs.getString("giasach"));
                vct.add(rs.getString("soluong"));
                vct.add(rs.getString("tomtat"));
                model.addRow(vct);
                tbkq.setModel(model);
	    }   
        } catch (Exception e) {
        }
           
        }
        
        if(cboChon.getSelectedItem().equals("Theo thể loại"))
        {
            cboMatl.setEnabled(true);
             try {
            tbkq.removeAll();
            String [] arr = {"Tên thể loại","Tên Sách","Tác giả","Nhà xuất bản"};
         //   DefaultTableModel model;
            model = new DefaultTableModel(arr, 0); //DefaultTableModel lưu trữ dữ liệu cho JTable trong một > Vector > Vectors .
            
            Connection connection = DBconnection.geConnection();
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//            String ngaybd = sdf.format(dcBD.getDate());
//            String ngaykt = sdf.format(dcCuoi.getDate());
            String query = "select tl.tentl , s.tensach , s.tacgia, s.nhaxb from Sach as s , TheLoai as tl where tl.matl = s.matl and tl.matl = '"+cboMatl.getSelectedItem()+"' group by tl.tentl , s.tensach , s.tacgia, s.nhaxb ";
            java.sql.Statement statement =  connection.createStatement();
	    ResultSet rs = statement.executeQuery(query);
            while(rs.next()) {
                Vector vct = new Vector();
                vct.add(rs.getString("tentl"));
                vct.add(rs.getString("tensach"));
                vct.add(rs.getString("tacgia"));
		vct.add(rs.getString("nhaxb"));
                model.addRow(vct);
                tbkq.setModel(model);
	    }   
        } catch (Exception e) {
        }
        }
    }

   
    private void cboChonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChonActionPerformed
        cboChon();
    }//GEN-LAST:event_cboChonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        trangchuthuvien ftv = new trangchuthuvien();
        ftv.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboMatlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMatlActionPerformed
        cboChon();
    }//GEN-LAST:event_cboMatlActionPerformed


    /**
     * @param args the command line arguments
     */
   
    private void hienthi(){
        try {
            tbkq.removeAll();
            String [] arr = {"Mã Sách","Tên Sách","Mã Thể Loại","Tác Giả","Nhà XB","Năm XB","Giá","Số Lượng","Tóm Tắt"};
            DefaultTableModel model;
            model = new DefaultTableModel(arr, 0); //DefaultTableModel lưu trữ dữ liệu cho JTable trong một > Vector > Vectors .
            
            Connection connection = DBconnection.geConnection();
            
            String query = "SELECT * FROM Sach";
            java.sql.Statement statement =  connection.createStatement();
	    ResultSet rs = statement.executeQuery(query);
            while(rs.next()) {
                Vector vct = new Vector();
		vct.add(rs.getString("mas"));
                vct.add(rs.getString("tensach"));
                vct.add(rs.getString("matl"));
                vct.add(rs.getString("tacgia"));
                vct.add(rs.getString("nhaxb"));
                vct.add(rs.getString("namxb"));
                vct.add(rs.getString("giasach"));
                vct.add(rs.getString("soluong"));
                vct.add(rs.getString("tomtat"));
                model.addRow(vct);
                tbkq.setModel(model);
	    }   
        } catch (Exception e) {
        }
        
    
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmTKS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmTKS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmTKS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmTKS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmTKS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnXuatE;
    private javax.swing.JComboBox<String> cboChon;
    private javax.swing.JComboBox<String> cboMatl;
    private com.toedter.calendar.JDateChooser dcBD;
    private com.toedter.calendar.JDateChooser dcCuoi;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tbkq;
    // End of variables declaration//GEN-END:variables

    private static class SQLException {

        public SQLException() {
        }

        
    }
}
